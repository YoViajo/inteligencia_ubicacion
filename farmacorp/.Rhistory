# Cargar las librerías necesarias
library(httr)
library(jsonlite)
# Cargar las librerías necesarias
library(httr)
library(jsonlite)
# Definir la consulta OverPass
(
);
>;
# Cargar las librerías necesarias
library(httr)
library(jsonlite)
# Definir la consulta OverPass
(
);
>;
# URL del servidor OverPass
overpass_url <- "https://overpass-api.de/api/interpreter"
# Instalar y cargar las bibliotecas necesarias
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(jsonlite)
library(dplyr)
library(leaflet)
# Cargar el archivo JSON exportado desde OverPass Turbo
json_file <- "ruta/al/archivo.json"
# Instalar y cargar las bibliotecas necesarias
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(jsonlite)
library(dplyr)
library(leaflet)
# Cargar el archivo JSON exportado desde OverPass Turbo
json_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/dat/farmacorp_ubic_node.geojson"
data <- fromJSON(json_file)
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Cargar el archivo GeoJSON exportado desde OverPass Turbo
geojson_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/dat/farmacorp_ubic_node.geojson"
data <- st_read(geojson_file)
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Cargar el archivo GeoJSON exportado desde OverPass Turbo
geojson_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
data <- st_read(geojson_file)
# Verificar los datos cargados
print(data)
# Filtrar solo los puntos (nodos)
points <- data %>% filter(type == "node")
# Cargar el archivo GeoJSON exportado desde OverPass Turbo
geojson_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
data <- st_read(geojson_file)
# Verificar la estructura del archivo
print(names(data))
print(head(data))
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Cargar el archivo GeoJSON exportado desde OverPass Turbo
geojson_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
data <- st_read(geojson_file)
# Verificar la estructura del archivo
print(names(data))
print(head(data))
# Crear un data frame con las coordenadas y el nombre
farmacorp_locations <- data %>%
select(id, name, geometry) %>%
mutate(lat = st_coordinates(geometry)[, 2],
lon = st_coordinates(geometry)[, 1])
# Verificar los resultados
print(farmacorp_locations)
# Crear un mapa interactivo con Leaflet
map <- leaflet() %>%
addTiles() %>%
addMarkers(data = farmacorp_locations,
lat = ~lat,
lng = ~lon,
popup = ~name)
# Mostrar el mapa
map
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Función para cargar y procesar un archivo GeoJSON
load_and_process_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry) %>%
mutate(lat = st_coordinates(geometry)[, 2],
lon = st_coordinates(geometry)[, 1])
return(processed_data)
}
# Cargar y procesar el archivo GeoJSON de nodos
node_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
node_data <- load_and_process_geojson(node_file)
# Cargar y procesar el archivo GeoJSON de vías
way_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_way.geojson"
way_data <- load_and_process_geojson(way_file)
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Función para cargar y procesar un archivo GeoJSON de nodos
load_and_process_node_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry) %>%
mutate(lat = st_coordinates(geometry)[, 2],
lon = st_coordinates(geometry)[, 1])
return(processed_data)
}
# Función para cargar y procesar un archivo GeoJSON de vías
load_and_process_way_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry)
return(processed_data)
}
# Cargar y procesar el archivo GeoJSON de nodos
node_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
node_data <- load_and_process_node_geojson(node_file)
# Cargar y procesar el archivo GeoJSON de vías
way_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_way.geojson"
way_data <- load_and_process_way_geojson(way_file)
# Verificar los resultados
print(node_data)
print(way_data)
# Crear un mapa interactivo con Leaflet
map <- leaflet() %>%
addTiles() %>%
addMarkers(data = node_data,
lat = ~lat,
lng = ~lon,
popup = ~name) %>%
addPolygons(data = way_data,
popup = ~name,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5)
# Mostrar el mapa
map
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Función para cargar y procesar un archivo GeoJSON de nodos
load_and_process_node_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry) %>%
mutate(lat = st_coordinates(geometry)[, 2],
lon = st_coordinates(geometry)[, 1])
return(processed_data)
}
# Función para cargar y procesar un archivo GeoJSON de vías
load_and_process_way_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(centroid_lat = st_coordinates(centroid)[, 2],
centroid_lon = st_coordinates(centroid)[, 1])
return(processed_data)
}
# Cargar y procesar el archivo GeoJSON de nodos
node_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
node_data <- load_and_process_node_geojson(node_file)
# Cargar y procesar el archivo GeoJSON de vías
way_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_way.geojson"
way_data <- load_and_process_way_geojson(way_file)
# Verificar los resultados
print(node_data)
print(way_data)
# Crear un mapa interactivo con Leaflet
map <- leaflet() %>%
addTiles() %>%
addMarkers(data = node_data,
lat = ~lat,
lng = ~lon,
popup = ~name) %>%
addPolygons(data = way_data,
popup = ~name,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5) %>%
addMarkers(data = way_data,
lat = ~centroid_lat,
lng = ~centroid_lon,
popup = ~name,
icon = makeIcon(iconUrl = "https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
iconWidth = 25, iconHeight = 41))
# Mostrar el mapa
map
# Instalar y cargar las bibliotecas necesarias
if (!require("sf")) install.packages("sf")
if (!require("dplyr")) install.packages("dplyr")
if (!require("leaflet")) install.packages("leaflet")
library(sf)
library(dplyr)
library(leaflet)
# Función para cargar y procesar un archivo GeoJSON de nodos
load_and_process_node_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry) %>%
mutate(lat = st_coordinates(geometry)[, 2],
lon = st_coordinates(geometry)[, 1])
return(processed_data)
}
# Función para cargar y procesar un archivo GeoJSON de vías
load_and_process_way_geojson <- function(file_path) {
data <- st_read(file_path)
processed_data <- data %>%
select(id, name, geometry) %>%
mutate(centroid = st_centroid(geometry)) %>%
mutate(centroid_lat = st_coordinates(centroid)[, 2],
centroid_lon = st_coordinates(centroid)[, 1])
return(processed_data)
}
# Cargar y procesar el archivo GeoJSON de nodos
node_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_node.geojson"
node_data <- load_and_process_node_geojson(node_file)
# Cargar y procesar el archivo GeoJSON de vías
way_file <- "C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/geodat/farmacorp_ubic_way.geojson"
way_data <- load_and_process_way_geojson(way_file)
# Verificar los resultados
print(node_data)
print(way_data)
# Definir un icono personalizado
custom_icon <- makeIcon(
iconUrl = "https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png",
iconWidth = 25,
iconHeight = 41
)
# Crear un mapa interactivo con Leaflet
map <- leaflet() %>%
addTiles() %>%
addMarkers(data = node_data,
lat = ~lat,
lng = ~lon,
popup = ~name,
icon = custom_icon) %>%
addPolygons(data = way_data,
popup = ~name,
color = "blue",
fillColor = "blue",
fillOpacity = 0.5) %>%
addMarkers(data = way_data,
lat = ~centroid_lat,
lng = ~centroid_lon,
popup = ~name,
icon = custom_icon)
# Mostrar el mapa
map
source("~/.active-rstudio-document", echo=TRUE)
setwd("C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/shiny")
shiny::runApp()
setwd("C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/shiny")
shiny::runApp()
setwd("C:/Users/yoviajo/Documents/GitHub/inteligencia_ubicacion/farmacorp/shiny")
shiny::runApp()
rsconnect::setAccountInfo(name = 'yoviajo',
token = '14E3FC3A3D1E65CD939C83CC7D8B0F25',
secret = 'MdZxR2wRQ9e4uFkAf+pxLyIPuV3YfllDgeRY3mC2',
server = 'posit.cloud')
install.packages("rvest")
install.packages("dplyr")
# Carga de librerías
library(rvest)
library(dplyr)
# URL de la página a scrapear
url <- 'https://farmacorp.com/pages/sucursales'
# Leer el contenido de la página
pagina <- read_html(url)
# Extraer los nombres y los enlaces de las sucursales en Santa Cruz
sucursales <- pagina %>%
html_nodes(".store-name a") %>%    # Selecciona los elementos de enlace (a) en la clase .store-name
html_attr("href")                  # Extrae el atributo href que contiene los enlaces
# Convertir la lista de sucursales en un data frame
sucursales_df <- data.frame(Enlaces = sucursales)
View(sucursales_df)
# Mostrar el resultado
print(sucursales_df)
